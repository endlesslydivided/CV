{
  "name": "Svetlana S.",
  "roles": [
    "SOFTWARE ENGINEER"
  ],
  "englishLevel": "B2",
  "domains": [
    "Financial,",
    "E-commerce,",
    "Data Analytics"
  ],
  "experienceYears": 5,
  "categories": {
    "Backend": [
      "Node JS",
      "TypeORM",
      "Nest JS",
      "GraphQL",
      "Jest",
      "Spring Framework",
      "Winston",
      "Swagger",
      "OAuth",
      "Spring Boot",
      "Express JS",
      "Slack API",
      "OpenID Connect."
    ],
    "Blockchain": [],
    "Build tools": [],
    "Clouds": [],
    "CMS": [],
    "Databases": [
      "PostgreSQL",
      "Redis."
    ],
    "DevOps": [
      "Terraform",
      "Docker",
      "Docker Compose",
      "GitHub Actions",
      "Prometheus",
      "Grafana",
      "Jenkins."
    ],
    "Frontend": [
      "React JS",
      "Redux-Toolkit",
      "HTML",
      "CSS",
      "Tailwind CSS",
      "Apollo GraphQL",
      "Cypress",
      "Redux",
      "i18next",
      "MUI."
    ],
    "Machine Learning": [],
    "Message brokers": [
      "RabbitMQ."
    ],
    "Operating systems": [],
    "Programming languages": [
      "JavaScript",
      "TypeScript",
      "Python",
      "Java",
      "Bash."
    ],
    "Source control systems": [
      "Git",
      "GitHub",
      "Bitbucket."
    ]
  },
  "projects": [
    {
      "name": "AUCTION E-COMMERCE PLATFORM",
      "description": "The internet e-commerce platform provides technology services to connect buyers and sellers through an online auction platform. Users can place lots with one or more items and specify a price for the whole lot or for every item in it.",
      "roles": [
        "Software Engineer"
      ],
      "period": {
        "start": "04.2022",
        "end": "Till now",
        "duration": 32
      },
      "responsibilities": [
        "Full Stack development",
        "Designed microservices architecture for application",
        "Managed and configured instances according to master-slave pattern",
        "Implemented GraphQL based API Gateway and integrated Apollo Client to fetch and manage data from GraphQL APIs",
        "Developed interactive and dynamic user interfaces using React JS",
        "Configured function triggers using AWS Lambda",
        "Managed user identities, service accounts, and permissions using AWS IAM",
        "Implemented a set of API tests",
        "Integrated GitHub Actions for CI/CD",
        "Implemented custom rate limiting and IP whitelisting solutions for API",
        "Utilized Terraform to automate the provisioning of all necessary AWS resources",
        "Wrote unit and integration tests"
      ],
      "environmentUnparsed": "JavaScript, TypeScript, Node JS, TypeORM, Nest JS, GraphQL, Jest, React JS, Redux-Toolkit, HTML, CSS, Tailwind CSS, Apollo GraphQL, Cypress, RabbitMQ, PostgreSQL, AWS(S3, Lambda, IAM, VPC, Route 53, DynamoDB, CloudFront, VPC), Terraform, Docker, Docker Compose, GitHub Actions, Git, GitHub",
      "techsFromResps": [
        "GraphQL",
        "React JS",
        "AWS Lambda",
        "AWS IAM",
        "GitHub Actions",
        "GitHub",
        "Terraform"
      ],
      "clouds": {
        "envs": [
          {
            "platform": "AWS",
            "service": "S3"
          },
          {
            "platform": "AWS",
            "service": "Lambda"
          },
          {
            "platform": "AWS",
            "service": "IAM"
          },
          {
            "platform": "AWS",
            "service": "VPC"
          },
          {
            "platform": "AWS",
            "service": "Route 53"
          },
          {
            "platform": "AWS",
            "service": "DynamoDB"
          },
          {
            "platform": "AWS",
            "service": "CloudFront"
          },
          {
            "platform": "AWS",
            "service": "VPC"
          }
        ],
        "reps": [
          {
            "platform": "AWS",
            "service": "Lambda"
          },
          {
            "platform": "AWS",
            "service": "IAM"
          }
        ]
      },
      "environment": [
        "JavaScript",
        "TypeScript",
        "Node JS",
        "TypeORM",
        "Nest JS",
        "GraphQL",
        "Jest",
        "React JS",
        "Redux-Toolkit",
        "HTML",
        "CSS",
        "Tailwind CSS",
        "Apollo GraphQL",
        "Cypress",
        "RabbitMQ",
        "PostgreSQL",
        "AWS(S3",
        "Lambda",
        "IAM",
        "VPC",
        "Route 53",
        "DynamoDB",
        "CloudFront",
        "VPC)",
        "Terraform",
        "Docker",
        "Docker Compose",
        "GitHub Actions",
        "Git",
        "GitHub"
      ]
    },
    {
      "name": "FINANCIAL PLATFORM",
      "description": "Billing system for providers of digital services that allows to keep and to control financial and technical information, as well as equipment information. The project is an automated system for recording, processing and analyzing information about financial transactions, as well as automated construction of financial reports for a certain period of time to track dynamics.",
      "roles": [
        "Software Engineer"
      ],
      "period": {
        "start": "03.2020",
        "end": "04.2022",
        "duration": 25
      },
      "responsibilities": [
        "Full Stack development",
        "Developed REST API using Nest JS;",
        "Implemented user authentication with OAuth;",
        "Developed client application with React JS;",
        "Participated in development process within Agile methodology;",
        "Created authentication microservice using Spring Framework;",
        "Set up custom endpoints to connect AWS API Gateway with AWS Lambda functions;",
        "Created and managed public and private subnets within the AWS VPC;",
        "Created Python scripts to schedule the generation of financial reports, automatically distributing these reports to stakeholders via AWS SES;",
        "Applied static analysis tools to identify vulnerabilities in the application code before deployment;",
        "Created API documentation using Swagger;",
        "Configured Prometheus to collect detailed metrics related to the platformâ€™s performance;",
        "Created Docker configuration files for local deployment and testing purposes."
      ],
      "environmentUnparsed": "JavaScript, TypeScript, Python, Java, Spring Framework, Node JS, Nest JS, TypeORM, Winston, Jest, Swagger, OAuth, React JS, Redux-Toolkit, Terraform, Tailwind CSS, HTML, CSS, Cypress, PostgreSQL, AWS(S3, EC2, Lambda, ECS, RDS, API Gateway, IAM, VPC, Route 53, SQS, CloudWatch, SES), Docker, Docker Compose, GitHub Actions, Prometheus, Grafana, Git, GitHub",
      "techsFromResps": [
        "Nest JS",
        "REST",
        "OAuth",
        "React JS",
        "Spring Framework",
        "AWS Lambda",
        "AWS API Gateway",
        "AWS VPC",
        "AWS SES",
        "Python",
        "Swagger",
        "Prometheus",
        "Docker"
      ],
      "clouds": {
        "envs": [
          {
            "platform": "AWS",
            "service": "S3"
          },
          {
            "platform": "AWS",
            "service": "EC2"
          },
          {
            "platform": "AWS",
            "service": "Lambda"
          },
          {
            "platform": "AWS",
            "service": "ECS"
          },
          {
            "platform": "AWS",
            "service": "RDS"
          },
          {
            "platform": "AWS",
            "service": "API Gateway"
          },
          {
            "platform": "AWS",
            "service": "IAM"
          },
          {
            "platform": "AWS",
            "service": "VPC"
          },
          {
            "platform": "AWS",
            "service": "Route 53"
          },
          {
            "platform": "AWS",
            "service": "SQS"
          },
          {
            "platform": "AWS",
            "service": "CloudWatch"
          },
          {
            "platform": "AWS",
            "service": "SES"
          }
        ],
        "reps": [
          {
            "platform": "AWS",
            "service": "Lambda"
          },
          {
            "platform": "AWS",
            "service": "API Gateway"
          },
          {
            "platform": "AWS",
            "service": "VPC"
          },
          {
            "platform": "AWS",
            "service": "SES"
          }
        ]
      },
      "environment": [
        "JavaScript",
        "TypeScript",
        "Python",
        "Java",
        "Spring Framework",
        "Node JS",
        "Nest JS",
        "TypeORM",
        "Winston",
        "Jest",
        "Swagger",
        "OAuth",
        "React JS",
        "Redux-Toolkit",
        "Terraform",
        "Tailwind CSS",
        "HTML",
        "CSS",
        "Cypress",
        "PostgreSQL",
        "AWS(S3",
        "EC2",
        "Lambda",
        "ECS",
        "RDS",
        "API Gateway",
        "IAM",
        "VPC",
        "Route 53",
        "SQS",
        "CloudWatch",
        "SES)",
        "Docker",
        "Docker Compose",
        "GitHub Actions",
        "Prometheus",
        "Grafana",
        "Git",
        "GitHub"
      ]
    },
    {
      "name": "CALL ANALYTICS PLATFORM",
      "description": "The platform is an intelligent Zoom recorder designed to provide detailed call analytics, generate summaries of discussed topics, and offer comprehensive information about meetings, ensuring you stay informed even when you cannot attend.",
      "roles": [
        "Software Engineer"
      ],
      "period": {
        "start": "04.2019",
        "end": "03.2020",
        "duration": 11
      },
      "responsibilities": [
        "Full Stack development;",
        "Developed REST APIs using Express JS;",
        "Modified already existed Java based microservices;",
        "Implemented PostgreSQL database and created custom stored procedures;",
        "Utilized RabbitMQ as a message broker to set up communication between Spring Framework and Express JS based microservices;",
        "Implemented internalization with i18next",
        "Integrated Slack's extensive API features for custom workflows and notifications;",
        "Utilized Redis for caching and session management in distributed applications;",
        "Created Bash scripts to automate interactions with external APIs;",
        "Integrated OpenID Connect (OIDC) to manage secure user authentication;",
        "Set up CI/CD pipelines with Jenkins for deployment within GCP GCE environment;",
        "Developed unit and integration tests with Jest;",
        "Participated in architecture discussions and planning sessions;"
      ],
      "environmentUnparsed": "JavaScript, TypeScript, Java, Bash, Spring Framework, Spring Boot, Node JS, Express JS, Slack API, OpenID Connect, TypeORM, Jest, React JS, Redux, i18next, MUI, CSS, HTML, RabbitMQ, PostgreSQL, Redis, GCP(GCS, GKE, GCR, GCE, Cloud Monitoring), Docker, Docker Compose, Jenkins, Git, Bitbucket",
      "techsFromResps": [
        "Express JS",
        "REST",
        "Java",
        "PostgreSQL",
        "Express JS",
        "Spring Framework",
        "RabbitMQ",
        "i18next",
        "Redis",
        "Jenkins",
        "Jest"
      ],
      "clouds": {
        "envs": [
          {
            "platform": "GCP",
            "service": "GCS"
          },
          {
            "platform": "GCP",
            "service": "GKE"
          },
          {
            "platform": "GCP",
            "service": "GCR"
          },
          {
            "platform": "GCP",
            "service": "GCE"
          },
          {
            "platform": "GCP",
            "service": "Cloud Monitoring"
          }
        ],
        "reps": []
      },
      "environment": [
        "JavaScript",
        "TypeScript",
        "Java",
        "Bash",
        "Spring Framework",
        "Spring Boot",
        "Node JS",
        "Express JS",
        "Slack API",
        "OpenID Connect",
        "TypeORM",
        "Jest",
        "React JS",
        "Redux",
        "i18next",
        "MUI",
        "CSS",
        "HTML",
        "RabbitMQ",
        "PostgreSQL",
        "Redis",
        "GCP(GCS",
        "GKE",
        "GCR",
        "GCE",
        "Cloud Monitoring)",
        "Docker",
        "Docker Compose",
        "Jenkins",
        "Git",
        "Bitbucket"
      ]
    }
  ]
}